package com.kklokker.dashboard;

import static com.codename1.ui.CN.*;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.layouts.*;

import java.net.URISyntaxException;
import java.util.*;
import java.util.List;
import java.util.stream.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.Resources;
import org.w3c.dom.Text;
import sun.font.TextLabel;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class Dashboard extends Lifecycle {
    private Form dashboard;
    private Container timeTable;
    private static List<timeEvent> events = new ArrayList<timeEvent>();
    private Container module;
    private static List<classModule> modules = new ArrayList<classModule>();

    @Override
    public void runApp() {
        dashboard = new Form("Dashboard", new LayeredLayout());
        dashboard.setUIID("dashboard");
        Container info = new Container(BoxLayout.y());
        info.add(timeDash());
        info.add(classDash());
        info.add(links());
        dashboard.add(info);
        dashboard.show();
    }

    //Timetable

    /*
    * Constructs the timeDash container
     */
    private Container timeDash() {
        Container timeDash = new Container(BoxLayout.y());
        Container timeTitle = new Container(new BorderLayout());
        timeDash.add(timeTitle);
        Container titleAndLogo = new Container(BoxLayout.x());
        Label title = new Label("Timetable");
        title.setUIID("classContainerTitle");
        titleAndLogo.add(title);
        titleAndLogo.add(makeIcon("\ue935", 10, "0x000000"));
        timeTitle.add(BorderLayout.WEST, titleAndLogo);
        timeTitle.add(BorderLayout.EAST, new Button("Open calendar"));
        Label todayLabel = new Label("Today");
        todayLabel.setUIID("todayLabel");
        timeDash.add(todayLabel);
        timeTable = new Container(new BoxLayout(BoxLayout.X_AXIS));
        timeTable.setScrollableX(true);

        addEvent(new String[]{"Learn HTML", "12 stream. Yellow shark", "12","30"});
        addEvent(new String[]{"Create a Back-End app", "7 Stream. Red peppers", "12","30"});
        addEvent(new String[]{"Learn PHP", "7 Stream. Red peppers", "15","00"});

        timeDash.add(timeTable);
        timeTable.setUIID("timeTable");
        Button addEvent = new Button("Add event");
        addEvent.addActionListener(e -> showEventForm());
        timeDash.add(addEvent);
        return timeDash;
    }

    /*
    * Adds am event to the timetable global variable is the input is valid and return true. This is due to not closing the pop-up  form
     */
    private boolean addEvent(String[] input) {
        if(validInput(input)) {
            timeEvent event = new timeEvent(input[0],(input[2] + ":" + input[3]), input[1]);
            return true;
        }
        return false;
    }

    /*
    * The pop-up  form creation.
    * This creates the form with labels and input fields and button which gather inputs and tries to make event if successful closing the pop-up or showing and error message
     */
    private void showEventForm() {
        Container eventForm = new Container(BoxLayout.y());
        eventForm.setUIID("popUpForm");
        Container title = new Container(new BorderLayout());
        title.add(BorderLayout.CENTER, new Label("Add new event"));
        Button close = new Button('X');
        close.addActionListener(e -> {dashboard.removeComponent(eventForm);dashboard.revalidateWithAnimationSafety();});
        title.add(BorderLayout.EAST, close);
        eventForm.add(title);
        Container name = new Container(BoxLayout.x());
        name.add(new Label("Name:"));
        TextField nameField = new TextField();
        nameField.setUIID("eventField");
        name.add(nameField);
        eventForm.add(name);
        Container address = new Container(BoxLayout.x());
        address.add(new Label("Address:"));
        TextField addressField = new TextField();
        addressField.setUIID("eventField");
        address.add(addressField);
        eventForm.add(address);
        Container time = new Container(BoxLayout.x());
        time.add(new Label("Time:"));
        TextField hourField = new TextField("","",2, TextField.NUMERIC);
        hourField.setUIID("eventField");
        time.add(hourField);
        time.add(new Label(":"));
        TextField minutField = new TextField("","",2, TextField.NUMERIC);
        minutField.setUIID("eventField");
        time.add(minutField);
        eventForm.add(time);
        Button add = new Button("Add event");
        add.addActionListener(e -> {
            String[] input = new String[4];
            int i = 0;
            for(Component con: eventForm)
                if (con instanceof Container)
                    for (Component text : (Container)con) {
                        if (text instanceof TextField) {
                            input[i] = ((TextField) text).getText();
                            i++;
                        }
                    }
            if(addEvent(input))
                dashboard.removeComponent(eventForm);
            else {
                Label error = new Label("Invalid input");
                error.setUIID("error");
                eventForm.add(error);
                dashboard.revalidateWithAnimationSafety();
            }
        });
        eventForm.add(add);
        dashboard.add(eventForm);
        dashboard.revalidateWithAnimationSafety();
    }

    /*
    * Class for the time events.
    * Includes constructor, a method for creating object, getter for time in string format and compareTo method
    * The comparable is implemented to sort the events according to the time of the event
     */
    private class timeEvent implements Comparable<timeEvent>{
        private String title;
        private int timeHour, timeMin;
        private String  address;

        private timeEvent(String title, String time, String address) {
            this.title = title;
            int index = time.indexOf(':');
            this.timeHour = Integer.parseInt(time.substring(0,index));
            this.timeMin = Integer.parseInt(time.substring(index+1, time.length()));
            this.address = address;
            events.add(this);
            Collections.sort(events);
            timeTable.removeAll();
            for(timeEvent e: events)
                timeTable.add(e.obj());
            dashboard.revalidateWithAnimationSafety();
        }

        private Container obj() {
            Container obj = new Container(new BorderLayout());
            Label labelTitle = new Label(title);
            Label labelTime = new Label(time());
            Label labelAddress = new Label(address);
            labelTitle.setUIID("timeTitle");
            labelTime.setUIID("timeTime");
            labelAddress.setUIID("timeAddress");
            obj.add(BorderLayout.NORTH, labelTime);
            obj.add(BorderLayout.CENTER, labelTitle);
            obj.add(BorderLayout.SOUTH, labelAddress);
            obj.setUIID("timeEvent");
            return obj;
        }

        public String time() {
            String time = (timeMin < 10) ? (timeHour + ":0" + timeMin) : (timeHour + ":" + timeMin);
            return time;
        }
        public int compareTo(timeEvent event) {
            double time = this.timeHour + this.timeMin/60;
            double eventTime = event.timeHour + event.timeMin/60;
            double diff = time-eventTime;
            return (int)(diff);
        }

    }

    //Classes

    /*
    * Creates the class dashboard with filter menu.
    * Also creates the classes from the design
     */
    private Container classDash() {
        Container classDash = new Container(BoxLayout.y());
        Container title = new Container(new BorderLayout());
        Label classTitle = new Label("Your classes");
        classTitle.setUIID("classContainerTitle");
        Container titleAndIcon = new Container(BoxLayout.x());
        titleAndIcon.add(classTitle);
        titleAndIcon.add(makeIcon("\ue7ef", 10,"0x000000"));
        title.add(BorderLayout.WEST, titleAndIcon);
        title.add(BorderLayout.EAST, new Button("see more"));
        classDash.add(title);
        Container menu = new Container(new GridLayout(1,4));
        Button all = new Button("All");
        all.addActionListener(e -> showModules(-1, all,menu));
        Button beginner = new Button("Beginner");
        beginner.addActionListener(e -> showModules(0, beginner,menu));
        Button intermediate = new Button("Intermed.");
        intermediate.addActionListener(e -> showModules(1,intermediate,menu));
        Button advanced = new Button("Advanced");
        advanced.addActionListener(e -> showModules(2,advanced,menu));
        all.setUIID("buttonSelected");
        beginner.setUIID("buttonUnselected");
        intermediate.setUIID("buttonUnselected");
        advanced.setUIID("buttonUnselected");
        menu.add(all);
        menu.add(beginner);
        menu.add(intermediate);
        menu.add(advanced);
        classDash.add(menu);
        module = new  Container(BoxLayout.y());
        classDash.add(module);
        new classModule("7 stream. Red Peppers", 7, 8,74,classModule.BEGINNER,"https://cdn-icons-png.flaticon.com/512/3412/3412950.png");
        new classModule("12 stream. Yellow shark", 12, 8,74,classModule.INTERMEDIATE,"https://cdn-icons-png.flaticon.com/512/2622/2622147.png");
        new classModule("13 stream. Green Rocket", 10, 8,15,classModule.BEGINNER,"https://cdn-icons-png.flaticon.com/512/166/166340.png");
        new classModule("5 stream, Purple apple", 14, 8,74,classModule.INTERMEDIATE,"https://cdn-icons-png.flaticon.com/512/1155/1155340.png");
        return classDash;
    }

    /*
    * This method is used for filtering the modules according to difficulty
    * The method takes 3 arguments, the difficulty which should be shown, the button which is pressed and the parent of the buttons
    * The two last arguments is used to style the not selected buttons and the selected button
     */
    private void showModules(int level, Button elem, Container parent) {
        for(Component con: parent) {
            if(con.getUIID() == "buttonSelected")
                con.setUIID("buttonUnselected");
        }
        elem.setUIID("buttonSelected");
        module.removeAll();
        for(classModule mod: modules)
            if(level == mod.level || level == -1)
                module.add(mod.obj());
        dashboard.revalidateWithAnimationSafety();
    }

    /*
    * Class for creating class objects.
    * The class include a obj function which returns the objects as a container
     */
    private class classModule {
        private String title, icon;
        private int students, lessons, progress, level;
        private static final int BEGINNER = 0, INTERMEDIATE = 1, ADVANCED = 2;

        private classModule(String title, int students, int lessons, int progress, int level, String image) {
            this.title = title;
            this.students = students;
            this.lessons = lessons;
            this.progress = progress;
            this.level = level;
            this.icon = image;
            modules.add(this);
            module.add(this.obj());
            dashboard.revalidateWithAnimationSafety();
        }

        private Container obj() {
            TableLayout moduleLayout = new TableLayout(3,3);
            Container obj = new Container(moduleLayout);
            obj.setScrollableX(false);
            Label i = new Label();
            int deviceWidth = Display.getInstance().getDisplayWidth();
            Image placeholder = Image.createImage(deviceWidth / 4, deviceWidth / 4, 0xbfc9d2); //square image set to 10% of screen width
            EncodedImage encImage = EncodedImage.createFromImage(placeholder, false);
            Image iconImage = URLImage.createToStorage(encImage, "2"+icon, icon, URLImage.RESIZE_SCALE);
            i.setIcon(iconImage);
            i.setUIID("classIcons");
            obj.add(moduleLayout.createConstraint().verticalSpan(3), i);
            Label title = new Label(this.title);
            title.setUIID("classTitle");
            obj.add(moduleLayout.createConstraint().horizontalSpan(2), title);
            String[] diff = new String[]{"Beginner", "Intermediate", "Advanced"};
            obj.add(moduleLayout, new Label(diff[level]));
            obj.add(moduleLayout, new Label(students + " students"));
            obj.add(moduleLayout, new Label(lessons + " lessons."));
            obj.add(moduleLayout, new Label(progress + "%"));
            obj.setUIID("classes");
            return obj;
        }
    }

    //Links

    /*
    * Creates the dash for the links and the links in the dash
     */
    private Container links() {
        Container links = new Container(BoxLayout.y());
        Container title = new Container(BoxLayout.x());
        Label linkTitle = new Label("Links");
        linkTitle.setUIID("linkTitle");
        title.add(linkTitle);
        title.add(makeIcon("\ue89e", 10,"0x000000"));
        links.add(title);
        Container mes = new link("Messager", "5 new messages", "\ue0cb").obj();
        mes.setUIID("messages");
        links.add(mes);
        Container prog = new link("Progress", "See the progress in detail in the chart", "\uE6e1").obj();
        prog.setUIID("prog");
        links.add(prog);
        Container cons = new link("Consultation", "3 students are waiting to see you", "\uE04e").obj();
        cons.setUIID("cons");
        links.add(cons);
        Container prof = new link("Profile", "See the progress in detail in the chart", "\uE7ff").obj();
        prof.setUIID("prof");
        links.add(prof);
        return links;
    }

    /*
    * Class for the link objects.
    * Includes an obj method used to return a container representing the object
     */
    private class link {
        private String title, subtext, icon;

        private link(String title, String subtext, String icon) {
            this.title = title;
            this.subtext = subtext;
            this.icon = icon;
        }

        private Container obj() {
            TableLayout moduleLayout = new TableLayout(2,2);
            Container obj = new Container(moduleLayout);
            Container linkIcon = new Container(BoxLayout.y());
            linkIcon.add(makeIcon(icon,8,"0x000000"));
            linkIcon.setUIID("linkIcons");
            obj.add(moduleLayout, linkIcon);
            Label linkTitle = new Label(title);
            linkTitle.setUIID("linkTitle");
            obj.add(moduleLayout, linkTitle);
            obj.add(moduleLayout.createConstraint().horizontalSpan(5), new Label(subtext));
            return  obj;
        }
    }

    //Help methods

    /*
    * Ensures no input is null and the time is in a valid range of a digital clock
     */
    private static boolean validInput(String[] input) {
        if(input[0] == null || input[1] == null || input[2] == null || input[3] == null)
            return false;
        if(!isNumeric(input[2]) || !isNumeric(input[3]))
            return false;
        int min = Integer.parseInt(input[3]);
        int hour = Integer.parseInt(input[2]);
        if(59 < min || min < 0 || 23 < hour || hour < 0)
            return false;
        return true;
    }

    /*
    * Returns is a given string a numeric, used for validating input
     */
    private static boolean isNumeric(String strNum) {
        try {
            double d = Integer.parseInt(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    /*
    * Makes an icon from the icon string found on https://fonts.google.com/icons?selected=Material+Icons where it has to start with "\u" + the icon code point
    * The width is used to the icon sized which is the screen-width divided by the width argument
    * The color argument is for the color of the icon given in hex
     */
    private FontImage makeIcon(String icon, int width, String color) {
        Font materialFont = FontImage.getMaterialDesignFont();
        int w = Display.getInstance().getDisplayWidth()/width;
        FontImage fontIcon = FontImage.createFixed(icon, materialFont, (int) Long.parseLong(color.substring(2), 16), w,w);
        return fontIcon;
    }
}
